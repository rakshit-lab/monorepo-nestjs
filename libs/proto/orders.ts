// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: orders.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "orders";

export interface SumRequest {
  a: number;
  b: number;
}

export interface SumResponse {
  result: number;
}

export interface Request {
  number: string;
  product: string;
  quantity: string;
}

export interface Response {
  id: number;
  number: string;
  product: string;
  quantity: string;
}

function createBaseSumRequest(): SumRequest {
  return { a: 0, b: 0 };
}

export const SumRequest: MessageFns<SumRequest> = {
  encode(message: SumRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.a !== 0) {
      writer.uint32(8).int32(message.a);
    }
    if (message.b !== 0) {
      writer.uint32(16).int32(message.b);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SumRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSumRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.a = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.b = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SumRequest {
    return {
      a: isSet(object.a) ? globalThis.Number(object.a) : 0,
      b: isSet(object.b) ? globalThis.Number(object.b) : 0,
    };
  },

  toJSON(message: SumRequest): unknown {
    const obj: any = {};
    if (message.a !== 0) {
      obj.a = Math.round(message.a);
    }
    if (message.b !== 0) {
      obj.b = Math.round(message.b);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SumRequest>, I>>(base?: I): SumRequest {
    return SumRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SumRequest>, I>>(object: I): SumRequest {
    const message = createBaseSumRequest();
    message.a = object.a ?? 0;
    message.b = object.b ?? 0;
    return message;
  },
};

function createBaseSumResponse(): SumResponse {
  return { result: 0 };
}

export const SumResponse: MessageFns<SumResponse> = {
  encode(message: SumResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== 0) {
      writer.uint32(8).int32(message.result);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SumResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSumResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.result = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SumResponse {
    return { result: isSet(object.result) ? globalThis.Number(object.result) : 0 };
  },

  toJSON(message: SumResponse): unknown {
    const obj: any = {};
    if (message.result !== 0) {
      obj.result = Math.round(message.result);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SumResponse>, I>>(base?: I): SumResponse {
    return SumResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SumResponse>, I>>(object: I): SumResponse {
    const message = createBaseSumResponse();
    message.result = object.result ?? 0;
    return message;
  },
};

function createBaseRequest(): Request {
  return { number: "", product: "", quantity: "" };
}

export const Request: MessageFns<Request> = {
  encode(message: Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.number !== "") {
      writer.uint32(10).string(message.number);
    }
    if (message.product !== "") {
      writer.uint32(18).string(message.product);
    }
    if (message.quantity !== "") {
      writer.uint32(26).string(message.quantity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.number = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.product = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.quantity = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return {
      number: isSet(object.number) ? globalThis.String(object.number) : "",
      product: isSet(object.product) ? globalThis.String(object.product) : "",
      quantity: isSet(object.quantity) ? globalThis.String(object.quantity) : "",
    };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.number !== "") {
      obj.number = message.number;
    }
    if (message.product !== "") {
      obj.product = message.product;
    }
    if (message.quantity !== "") {
      obj.quantity = message.quantity;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request>, I>>(base?: I): Request {
    return Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request>, I>>(object: I): Request {
    const message = createBaseRequest();
    message.number = object.number ?? "";
    message.product = object.product ?? "";
    message.quantity = object.quantity ?? "";
    return message;
  },
};

function createBaseResponse(): Response {
  return { id: 0, number: "", product: "", quantity: "" };
}

export const Response: MessageFns<Response> = {
  encode(message: Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.number !== "") {
      writer.uint32(18).string(message.number);
    }
    if (message.product !== "") {
      writer.uint32(26).string(message.product);
    }
    if (message.quantity !== "") {
      writer.uint32(34).string(message.quantity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.number = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.product = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.quantity = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      number: isSet(object.number) ? globalThis.String(object.number) : "",
      product: isSet(object.product) ? globalThis.String(object.product) : "",
      quantity: isSet(object.quantity) ? globalThis.String(object.quantity) : "",
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.number !== "") {
      obj.number = message.number;
    }
    if (message.product !== "") {
      obj.product = message.product;
    }
    if (message.quantity !== "") {
      obj.quantity = message.quantity;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.id = object.id ?? 0;
    message.number = object.number ?? "";
    message.product = object.product ?? "";
    message.quantity = object.quantity ?? "";
    return message;
  },
};

export type OrdersServiceService = typeof OrdersServiceService;
export const OrdersServiceService = {
  multiply: {
    path: "/orders.OrdersService/Multiply",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SumRequest): Buffer => Buffer.from(SumRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): SumRequest => SumRequest.decode(value),
    responseSerialize: (value: SumResponse): Buffer => Buffer.from(SumResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): SumResponse => SumResponse.decode(value),
  },
  add: {
    path: "/orders.OrdersService/Add",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SumRequest): Buffer => Buffer.from(SumRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): SumRequest => SumRequest.decode(value),
    responseSerialize: (value: SumResponse): Buffer => Buffer.from(SumResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): SumResponse => SumResponse.decode(value),
  },
  addOrder: {
    path: "/orders.OrdersService/addOrder",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Request): Buffer => Buffer.from(Request.encode(value).finish()),
    requestDeserialize: (value: Buffer): Request => Request.decode(value),
    responseSerialize: (value: Response): Buffer => Buffer.from(Response.encode(value).finish()),
    responseDeserialize: (value: Buffer): Response => Response.decode(value),
  },
} as const;

export interface OrdersServiceServer extends UntypedServiceImplementation {
  multiply: handleUnaryCall<SumRequest, SumResponse>;
  add: handleUnaryCall<SumRequest, SumResponse>;
  addOrder: handleUnaryCall<Request, Response>;
}

export interface OrdersServiceClient extends Client {
  multiply(request: SumRequest, callback: (error: ServiceError | null, response: SumResponse) => void): ClientUnaryCall;
  multiply(
    request: SumRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SumResponse) => void,
  ): ClientUnaryCall;
  multiply(
    request: SumRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SumResponse) => void,
  ): ClientUnaryCall;
  add(request: SumRequest, callback: (error: ServiceError | null, response: SumResponse) => void): ClientUnaryCall;
  add(
    request: SumRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SumResponse) => void,
  ): ClientUnaryCall;
  add(
    request: SumRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SumResponse) => void,
  ): ClientUnaryCall;
  addOrder(request: Request, callback: (error: ServiceError | null, response: Response) => void): ClientUnaryCall;
  addOrder(
    request: Request,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Response) => void,
  ): ClientUnaryCall;
  addOrder(
    request: Request,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Response) => void,
  ): ClientUnaryCall;
}

export const OrdersServiceClient = makeGenericClientConstructor(
  OrdersServiceService,
  "orders.OrdersService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): OrdersServiceClient;
  service: typeof OrdersServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
