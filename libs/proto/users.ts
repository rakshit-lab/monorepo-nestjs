// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: users.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "users";

export interface Request {
}

export interface Response {
  users: User[];
}

export interface User {
  id: number;
  name: string;
  username: string;
  email: string;
  address: Address | undefined;
  phone: string;
  website: string;
  company: Company | undefined;
}

/** Address object */
export interface Address {
  street: string;
  suite: string;
  city: string;
  zipcode: string;
  geo: Geo | undefined;
}

/** Geo object */
export interface Geo {
  lat: string;
  lng: string;
}

/** Company object */
export interface Company {
  name: string;
  catchPhrase: string;
  bs: string;
}

function createBaseRequest(): Request {
  return {};
}

export const Request: MessageFns<Request> = {
  encode(_: Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Request {
    return {};
  },

  toJSON(_: Request): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Request>, I>>(base?: I): Request {
    return Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request>, I>>(_: I): Request {
    const message = createBaseRequest();
    return message;
  },
};

function createBaseResponse(): Response {
  return { users: [] };
}

export const Response: MessageFns<Response> = {
  encode(message: Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.users) {
      User.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.users.push(User.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return { users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => User.fromJSON(e)) : [] };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.users?.length) {
      obj.users = message.users.map((e) => User.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.users = object.users?.map((e) => User.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUser(): User {
  return { id: 0, name: "", username: "", email: "", address: undefined, phone: "", website: "", company: undefined };
}

export const User: MessageFns<User> = {
  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.username !== "") {
      writer.uint32(26).string(message.username);
    }
    if (message.email !== "") {
      writer.uint32(34).string(message.email);
    }
    if (message.address !== undefined) {
      Address.encode(message.address, writer.uint32(42).fork()).join();
    }
    if (message.phone !== "") {
      writer.uint32(50).string(message.phone);
    }
    if (message.website !== "") {
      writer.uint32(58).string(message.website);
    }
    if (message.company !== undefined) {
      Company.encode(message.company, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.address = Address.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.website = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.company = Company.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      address: isSet(object.address) ? Address.fromJSON(object.address) : undefined,
      phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
      website: isSet(object.website) ? globalThis.String(object.website) : "",
      company: isSet(object.company) ? Company.fromJSON(object.company) : undefined,
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.address !== undefined) {
      obj.address = Address.toJSON(message.address);
    }
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    if (message.website !== "") {
      obj.website = message.website;
    }
    if (message.company !== undefined) {
      obj.company = Company.toJSON(message.company);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.username = object.username ?? "";
    message.email = object.email ?? "";
    message.address = (object.address !== undefined && object.address !== null)
      ? Address.fromPartial(object.address)
      : undefined;
    message.phone = object.phone ?? "";
    message.website = object.website ?? "";
    message.company = (object.company !== undefined && object.company !== null)
      ? Company.fromPartial(object.company)
      : undefined;
    return message;
  },
};

function createBaseAddress(): Address {
  return { street: "", suite: "", city: "", zipcode: "", geo: undefined };
}

export const Address: MessageFns<Address> = {
  encode(message: Address, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.street !== "") {
      writer.uint32(10).string(message.street);
    }
    if (message.suite !== "") {
      writer.uint32(18).string(message.suite);
    }
    if (message.city !== "") {
      writer.uint32(26).string(message.city);
    }
    if (message.zipcode !== "") {
      writer.uint32(34).string(message.zipcode);
    }
    if (message.geo !== undefined) {
      Geo.encode(message.geo, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Address {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.street = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.suite = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.city = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.zipcode = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.geo = Geo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Address {
    return {
      street: isSet(object.street) ? globalThis.String(object.street) : "",
      suite: isSet(object.suite) ? globalThis.String(object.suite) : "",
      city: isSet(object.city) ? globalThis.String(object.city) : "",
      zipcode: isSet(object.zipcode) ? globalThis.String(object.zipcode) : "",
      geo: isSet(object.geo) ? Geo.fromJSON(object.geo) : undefined,
    };
  },

  toJSON(message: Address): unknown {
    const obj: any = {};
    if (message.street !== "") {
      obj.street = message.street;
    }
    if (message.suite !== "") {
      obj.suite = message.suite;
    }
    if (message.city !== "") {
      obj.city = message.city;
    }
    if (message.zipcode !== "") {
      obj.zipcode = message.zipcode;
    }
    if (message.geo !== undefined) {
      obj.geo = Geo.toJSON(message.geo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Address>, I>>(base?: I): Address {
    return Address.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Address>, I>>(object: I): Address {
    const message = createBaseAddress();
    message.street = object.street ?? "";
    message.suite = object.suite ?? "";
    message.city = object.city ?? "";
    message.zipcode = object.zipcode ?? "";
    message.geo = (object.geo !== undefined && object.geo !== null) ? Geo.fromPartial(object.geo) : undefined;
    return message;
  },
};

function createBaseGeo(): Geo {
  return { lat: "", lng: "" };
}

export const Geo: MessageFns<Geo> = {
  encode(message: Geo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lat !== "") {
      writer.uint32(10).string(message.lat);
    }
    if (message.lng !== "") {
      writer.uint32(18).string(message.lng);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Geo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGeo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lat = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lng = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Geo {
    return {
      lat: isSet(object.lat) ? globalThis.String(object.lat) : "",
      lng: isSet(object.lng) ? globalThis.String(object.lng) : "",
    };
  },

  toJSON(message: Geo): unknown {
    const obj: any = {};
    if (message.lat !== "") {
      obj.lat = message.lat;
    }
    if (message.lng !== "") {
      obj.lng = message.lng;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Geo>, I>>(base?: I): Geo {
    return Geo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Geo>, I>>(object: I): Geo {
    const message = createBaseGeo();
    message.lat = object.lat ?? "";
    message.lng = object.lng ?? "";
    return message;
  },
};

function createBaseCompany(): Company {
  return { name: "", catchPhrase: "", bs: "" };
}

export const Company: MessageFns<Company> = {
  encode(message: Company, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.catchPhrase !== "") {
      writer.uint32(18).string(message.catchPhrase);
    }
    if (message.bs !== "") {
      writer.uint32(26).string(message.bs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Company {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompany();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.catchPhrase = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.bs = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Company {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      catchPhrase: isSet(object.catchPhrase) ? globalThis.String(object.catchPhrase) : "",
      bs: isSet(object.bs) ? globalThis.String(object.bs) : "",
    };
  },

  toJSON(message: Company): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.catchPhrase !== "") {
      obj.catchPhrase = message.catchPhrase;
    }
    if (message.bs !== "") {
      obj.bs = message.bs;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Company>, I>>(base?: I): Company {
    return Company.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Company>, I>>(object: I): Company {
    const message = createBaseCompany();
    message.name = object.name ?? "";
    message.catchPhrase = object.catchPhrase ?? "";
    message.bs = object.bs ?? "";
    return message;
  },
};

export type UserServiceService = typeof UserServiceService;
export const UserServiceService = {
  userList: {
    path: "/users.UserService/userList",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Request): Buffer => Buffer.from(Request.encode(value).finish()),
    requestDeserialize: (value: Buffer): Request => Request.decode(value),
    responseSerialize: (value: Response): Buffer => Buffer.from(Response.encode(value).finish()),
    responseDeserialize: (value: Buffer): Response => Response.decode(value),
  },
} as const;

export interface UserServiceServer extends UntypedServiceImplementation {
  userList: handleUnaryCall<Request, Response>;
}

export interface UserServiceClient extends Client {
  userList(request: Request, callback: (error: ServiceError | null, response: Response) => void): ClientUnaryCall;
  userList(
    request: Request,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Response) => void,
  ): ClientUnaryCall;
  userList(
    request: Request,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Response) => void,
  ): ClientUnaryCall;
}

export const UserServiceClient = makeGenericClientConstructor(UserServiceService, "users.UserService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UserServiceClient;
  service: typeof UserServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
